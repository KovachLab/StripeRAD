###Rubias 
###Population Assignment

###Packages
library(devtools)
#Rubias
install.packages("rubias") 
library(rubias)
#Radiator
devtools::install_github("thierrygosselin/radiator")
library(radiator)
#Assigner
devtools::install_github("thierrygosselin/assigner")
library(assigner)
assigner::install_gsi_sim(fromSource = TRUE)



##Need to create strata files, these files let you create different assignment groups for the samples
##A strata file is a file with two columns, with headers INDIVIDUALS and STRATA. Indivs are samples and Strata are groups you want them assinged to.
##Save strata as a .strata.tsv file for it to work

#Use radiator::summary to check to make sure the .tsv file will work

radiator::summary_strata("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv")
radiator::summary_strata("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Ches_Grouped/ChesGrouped.strata.tsv")
radiator::summary_strata("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Ches_Del_Grouped/ChesDelGroup.strata.tsv")
radiator::summary_strata("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/ChesDelRoa_Grouped/ChesDelRoa.strata.tsv")
radiator::summary_strata("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/ChesDelRoa_HudKen/ChesDelRoa_HudKen.strata.tsv")
radiator::summary_strata("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/US_vs_Can/US_Can.strata.tsv")

#Use this command to make sure that it is reading your file as the correct file type, in this case a VCF
radiator::detect_genomic_format("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k.vcf")

#######Assigner#########
##Assigner needs tidy_genomic data to run, use this command to convert VCF to correct format, and use strata files for assignment groups
#Works
All_Rivers_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                                strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv", filter.common.markers = FALSE)
All_Rivers_rad

###Using 9,492 SNP set for pop assignment test
All_Rivs_Rad_9K <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_9k.vcf",
                                     strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv", filter.common.markers = FALSE)

All_Rivs_9k_assign <- assigner::assignment_ngs(data = All_Rivs_Rad_9K, 
                                                     assignment.analysis = "gsi_sim",
                                                     markers.sampling = "ranked",
                                                     thl = 0.2,
                                                     iteration.method = 5)
All_Rivs_9k_assign
# work
Ches_Group_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                  strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Ches_Grouped/ChesGrouped.strata.tsv", filter.common.markers = FALSE)

#Works
ChesDel_Group_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                  strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Ches_Del_Grouped/ChesDelGroup.strata.tsv", filter.common.markers = FALSE)
# Work
ChesDelRoa_Rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                  strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/ChesDelRoa_Grouped/ChesDelRoa.strata.tsv", filter.common.markers = FALSE)

ChesDel_HudKen_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                                        strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Ches_Del_Grouped/ChesDel_HudKen.strata.tsv", filter.common.markers = FALSE)
ChesDel_HudKen_Sub <- assigner::assignment_ngs(data = ChesDel_HudKen_rad,
                                                  assignment.analysis = "gsi_sim",
                                                  markers.sampling = "ranked",
                                                  thl = 0.2,
                                                  iteration.method = 5,
                                                  marker.number = c(100, 500, 1000,2000, "all"))
ChesDel_HudKen_Sub

##Works
ChesDelRoa_HudKen_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                  strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/ChesDelRoa_HudKen/ChesDelRoa_HudKen.strata.tsv", filter.common.markers = FALSE)
ChesDelRoa_HudKen_assign <- assigner::assignment_ngs(data = ChesDelRoa_HudKen_rad, 
                assignment.analysis = "gsi_sim",
                markers.sampling = "ranked",
                thl = 0.2,
                iteration.method = 5)
ChesDelRoa_HudKen_assign

ChesDelRoa_HudKen_Sub <- assigner::assignment_ngs(data = ChesDelRoa_HudKen_rad,
                                                  assignment.analysis = "gsi_sim",
                                                  markers.sampling = "ranked",
                                                  thl = 0.2,
                                                  iteration.method = 5,
                                                 marker.number = c(100, 500, 1000,2000, "all"))
ChesDelRoa_HudKen_Sub
# Work
US_Can_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                  strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/US_vs_Can/US_Can.strata.tsv", filter.common.markers = FALSE)

Ches_HudKen_13k_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                  strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/Ches_HudKen.strata.tsv", filter.common.markers = FALSE)

Ches_HudKen_Sub_THL <- assigner::assignment_ngs(data = Ches_HudKen_13k_rad,
                                                assignment.analysis = "gsi_sim",
                                                markers.sampling = "ranked",
                                                thl = 0.2,
                                                iteration.method = 5,
                                                marker.number = c(2500, 3000, 3500,"all"))
Ches_HudKen_Sub_THL

ChesHudKen_Sub100_THL <- assigner::assignment_ngs(data = Ches_HudKen_13k_rad,
                                                assignment.analysis = "gsi_sim",
                                                markers.sampling = "ranked",
                                                thl = 0.2,
                                                iteration.method = 5,
                                                marker.number = c(100, 500, 1000,2000, "all"))
ChesHudKen_Sub100_THL

HudKen_13k_rad <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k_stacks_recode.vcf", 
                                         strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/HudKen.strata.tsv", filter.common.markers = FALSE)

HudKen_13k_assign <- assigner::assignment_ngs(data = HudKen_13k_rad, 
                                                     assignment.analysis = "gsi_sim",
                                                     markers.sampling = "ranked",
                                                     thl = 0.2,
                                                     iteration.method = 5)
HudKen_13k_assign

##Assignment using Training-Holdout-Leave-One-Out (THL) all SNPs, 13k
Allrivs_assign <- assigner::assignment_ngs(data = All_Rivers_rad, 
        assignment.analysis = "gsi_sim",
        markers.sampling = "ranked",
        thl = 0.2,
        iteration.method = 5)

Allrivs_assign
Allrivs_assign$assignment.plot
Allrivs_assign$assignment.plot + ggplot2::scale_y_continuous(limits = c(0,100))

##Sub-sampling loci to see at which point pops begin to be accurately assigned so can build SNP panel
Allrivs_THL_sub <- assigner::assignment_ngs(data = All_Rivers_rad,
        assignment.analysis = "gsi_sim",
        markers.sampling = "ranked",
        thl = 0.2,
        iteration.method = 5,
        marker.number = c(2500, 3000, 3500,"all"))
Allrivs_THL_sub



##Fst Ranking of loci
fst_rank_wc <- fst_WC84(data = All_Rivers_rad,
        snprelate = FALSE,
        strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv",
        pop.levels = c("Roanoke", "Potomac", "Choptank", "Upper_Bay", "Delaware", "Hudson", "Kennebec", "Shubenacadie", "Miramichi"),
        pairwise = TRUE,
        ci = FALSE,
        iteration.ci = 100,
        quantiles.ci = c(0.025, 0.975),
        digits = 9,
        filename = NULL,
        parallel.core = parallel::detectCores() - 2,
        verbose = FALSE)

write.csv(fst_rank_wc$fst.ranked, "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assigner/fstranked.csv")
fstranked_csv <- write.csv(fstranked, "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assigner/fstranked.csv")

##Assignment using Leave One Out (LOO) all SNPs 13k
Allrivs_LOO <- assigner::assignment_ngs(
        data = All_Rivers_rad,
        assignment.analysis = "gsi_sim",
        markers.sampling = "random",
        marker.number = "all")

Allrivs_LOO


All_Rivs_LOO_9k <- assigner::assignment_ngs(
        data = All_Rivs_Rad_9K,
        assignment.analysis = "gsi_sim",
        markers.sampling = "random",
        marker.number = "all")

All_Rivs_LOO_9k

###RAnked SNP trials conversions
AllRivers_rad_500 <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/500_Ranked.vcf", 
                                    strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv", filter.common.markers = FALSE)

AllRivers_rad_1000 <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/1000_Ranked.vcf", 
                                       strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv", filter.common.markers = FALSE)

AllRivers_rad_1500 <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/1500_Ranked.vcf", 
                                       strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv", filter.common.markers = FALSE)

AllRivers_rad_2000 <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/2000_Ranked.vcf", 
                                       strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/All_Rivers.strata.tsv", filter.common.markers = FALSE)

Ches_HudKen_2000 <- tidy_genomic_data("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/2000_Ranked.vcf", 
                                      strata = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_rivers/Ches_HudKen.strata.tsv", filter.common.markers = FALSE)

Ches_HudKen_assign_2000 <- assigner::assignment_ngs(data = Ches_HudKen_2000, 
                                               assignment.analysis = "gsi_sim",
                                               markers.sampling = "ranked",
                                               thl = 0.2,
                                               iteration.method = 5)
Ches_HudKen_assign_2000




Allrivs_assign_500 <- assigner::assignment_ngs(data = AllRivers_rad_500, 
                                           assignment.analysis = "gsi_sim",
                                           markers.sampling = "ranked",
                                           thl = 0.2,
                                           iteration.method = 5)
Allrivs_assign_500

Allrivs_assign_1000 <- assigner::assignment_ngs(data = AllRivers_rad_1000, 
                                               assignment.analysis = "gsi_sim",
                                               markers.sampling = "ranked",
                                               thl = 0.2,
                                               iteration.method = 5)
Allrivs_assign_1000

Allrivs_assign_1500 <- assigner::assignment_ngs(data = AllRivers_rad_1500, 
                                               assignment.analysis = "gsi_sim",
                                               markers.sampling = "ranked",
                                               thl = 0.2,
                                               iteration.method = 5)

Allrivs_assign_1500

Allrivs_assign_2000 <- assigner::assignment_ngs(data = AllRivers_rad_2000, 
                                               assignment.analysis = "gsi_sim",
                                               markers.sampling = "ranked",
                                               thl = 0.2,
                                               iteration.method = 5)
Allrivs_assign_2000

Ches_HudKen_LOO <- assigner::assignment_ngs(
        data = Ches_HudKen_2000,
        assignment.analysis = "gsi_sim",
        markers.sampling = "random",
        marker.number = "all")
Ches_HudKen_LOO

#####assignPOP#####
install.packages("assignPOP")
library(assignPOP)

#Read genepop file
asspop_genpop <- read.Genepop("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Allpops_13k.gen", pop.names = c("Roanoke", "Potomac", "Choptank", "Upper_Bay", "Delaware", "Hudson", "Kennebec", "Shebenacadie", "Miramichi"),
        haploid = FALSE)

assignpop_9k <- read.Genepop("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_Pops_9k.gen", pop.names = c("Roanoke", "Potomac", "Choptank", "Upper_Bay", "Delaware", "Hudson", "Kennebec", "Shebenacadie", "Miramichi"),
                             haploid = FALSE)

#Population assignment with Monte-carlo cross validation
asspop_mc <- assign.MC(asspop_genpop, train.inds = c(0.8), train.loci = c(1),
        loci.sample = "fst", interations = 30, model = "svm", dir = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assignPOP_results/MC/")

asspop_mc_9k <- assign.MC(assignpop_9k, train.inds = c(0.8), train.loci = c(1),
                       loci.sample = "fst", interations = 30, model = "svm", dir = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assignPOP_results/MC_9k/")
asspop_mc_9k
#Population assignment with k-fold cross validation
asspop_kfold <- assign.kfold(asspop_genpop, k.fold = c(3, 4, 5), train.loci = c(1), loci.sample = "random",
        model = "lda", dir = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assignPOP_results/Kfold/")

#calculating assignment accuracy
MCaccu <- accuracy.MC(dir = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assignPOP_results/MC/")

MCaccu_9k <- accuracy.MC(dir = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assignPOP_results/MC_9k/")
MCaccu_9k

Kfoldaccu <- accuracy.kfold(dir = "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/assignPOP_results/Kfold/")

library(ggplot2)
accuracy.plot(MCaccu_9k, pop = c("all", "Roanoke", "Potomac", "Choptank", "Upper_Bay", "Delaware", "Hudson", "Kennebec", "Shebenacadie", "Miramichi")) +
              ylim(0,1) +
              annotate("segment", x=0.4, xend = 3.6, y=0.33, yend = 0.33, colour="red", size=1) +
              ggtitle("Monte-Carlo Cross_Validation") +
              theme(plot.title = element_text(size = 20, face = "bold"))


########RUBIAS###########
##Rubias requires a specific file type, need to convert VCF 
##Use Radiator to convert file

##Make sure Rubias is the commit. Older commits cannot handle large datasets
remotes::install_github("eriqande/rubias")

###Use the Tidy_genomic files from above to convert to gsi_sim file to use in Rubias

##Need a strata file specific for converting to rubias using radiator
Allrivs_rubias_strata <- read.csv("~/Documents/Thesis_Stuff/Analyses/Pop_assignment/All_Rivers_Rubiasconvert.strata.csv")

###Use the tidy genomic file from above assigner runs and convert to rubias format using: write_rubias
All_Rivers_Rubias_13k <- write_rubias(All_Rivers_rad, strata = Allrivs_rubias_strata, filename = NULL)

###write_rubias makes the chromosome columns "double" format when they should be "characters"
## check column format using: 
typeof(All_Rivers_Rubias_13k$SSXF01000001_1__100__3957868.A1)

### to convert them to characters, (FYI- this over-writes your current file)
All_Rivers_Rubias_13k[] <- lapply(All_Rivers_Rubias_13k, as.character)

##All_Rivers_Rubias_13k -> "reference" file used in Rubias

###Checking effectiveness of reference to assign individuals to a repunit
##Using 13,178 SNPs
Allrivs_rubias_assign <- self_assign(reference = All_Rivers_Rubias_Fix, gen_start_col = 6)
head(Allrivs_rubias_assign, n = 100)

repu_sum <- Allrivs_rubias_assign %>%
        group_by(indiv, collection, repunit, inferred_repunit) %>%
        summarise(repu_scaled_like = sum(scaled_likelihood))

head(repu_sum, n = 200)

##summary of assignment results
write.csv(repu_sum, "~/Documents/Thesis_Stuff/Analyses/Pop_assignment/Assign_Summ.csv")

##Using 9,406 SNPs (use same strata file as above)
All_Rivers_Rubias_9k <- write_rubias(All_Rivs_Rad_9K, strata = Allrivs_rubias_strata, filename = NULL)

##convert to chracters
All_Rivers_Rubias_9k[] <- lapply(All_Rivers_Rubias_9k, as.character)

##Run assignment test
Allrivs_rubias_assign_9k <- self_assign(reference = All_Rivers_Rubias_9k, gen_start_col = 6)

head(Allrivs_rubias_assign, n = 100)

##Summarizing assignment test. 
repu_sum_9k <- Allrivs_rubias_assign %>%
        group_by(indiv, collection, repunit, inferred_repunit) %>%
        summarise(repu_scaled_like = sum(scaled_likelihood))




#####Simulating mixtures to to see what kind of accuracy you can expect from panel 

